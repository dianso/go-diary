name: Go Cross-Platform Build & Release

on:
  push:
    tags: 
      - "v*"
  workflow_dispatch:

env:
  PROJECT_NAME: go-diary
  GO_VERSION: '1.24'
  CONFIG_FILE: config.yml

jobs:
  build:
    name: Build (${{ matrix.os }}-${{ matrix.arch }})
    runs-on: ${{ matrix.os == 'windows' && 'windows-latest' || 'ubuntu-latest' }}
    strategy:
      fail-fast: false  # 关键修复：一个平台失败不影响其他平台
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: linux
            arch: arm
            arm_version: 6
          - os: linux
            arch: arm
            arm_version: 7
          - os: windows
            arch: amd64
          - os: windows
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      # Windows 专用步骤：安装 zip
      - name: Install zip (Windows)
        if: matrix.os == 'windows'
        run: choco install zip -y

      - name: Build Binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          GOARM: ${{ matrix.arm_version || '' }}
          CGO_ENABLED: 0
        run: |
          # 生成带版本号的文件名
          OUTPUT="${{ env.PROJECT_NAME }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.arm_version || '' }}"
          if [ "${{ matrix.os }}" = "windows" ]; then
            OUTPUT="$OUTPUT.exe"
          fi

          echo "=== 开始编译 ==="
          go build -o $OUTPUT ./main.go
          
          echo "=== 验证文件 ==="
          ls -al
          if [ ! -f "$OUTPUT" ]; then
            echo "::error ::编译失败：未生成 $OUTPUT"
            exit 1
          fi

      - name: Prepare Package
        run: |
          # 文件名定义
          BINARY="${{ env.PROJECT_NAME }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.arm_version || '' }}"
          ZIP_NAME="package-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.arm_version || '' }}.zip"

          # 创建临时目录
          mkdir _package

          # 处理可执行文件
          if [ "${{ matrix.os }}" = "windows" ]; then
            cp "$BINARY.exe" _package/
          else
            cp $BINARY _package/
          fi

          # 复制配置文件
          echo "=== 复制配置文件 ==="
          cp ${{ env.CONFIG_FILE }} _package/ || echo "::warning ::配置文件不存在，继续打包"

          # 压缩操作
          echo "=== 开始压缩 ==="
          if [ "${{ matrix.os }}" = "windows" ]; then
            cd _package
            zip -r ../$ZIP_NAME *
            cd ..
          else
            zip -r $ZIP_NAME _package/*
          fi

          echo "=== 最终文件 ==="
          ls -al *.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}${{ matrix.arm_version || '' }}
          path: |
            package-*.zip
          retention-days: 3

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare Release Assets
        run: |
          mkdir release-assets
          find artifacts -name '*.zip' -exec cp {} release-assets \;
          
          # 生成校验文件
          cd release-assets
          sha256sum * > SHA256SUMS.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: |
            ### 构建信息
            - **版本**: ${{ github.ref_name }}
            - **构建时间**: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
            - **提交**: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            
            ### 支持平台
            ${{ join(matrix.*, ', ') }}
          files: |
            release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}