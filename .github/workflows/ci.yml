name: Go Cross-Platform Build & Release

on:
  push:
    tags: 
      - "v*"
  workflow_dispatch:

env:
  PROJECT_NAME: go-diary
  GO_VERSION: '1.24'

jobs:
  build:
    name: Build (${{ matrix.os }}-${{ matrix.arch }}${{ matrix.win7 && '-win7' || '' }})
    runs-on: ${{ matrix.os == 'windows' && 'windows-latest' || 'ubuntu-latest' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: linux
            arch: arm
            arm_version: 6
          - os: linux
            arch: arm
            arm_version: 7
          - os: windows
            arch: amd64
          - os: windows
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          # 额外添加 Windows 7 兼容版本
          - os: windows
            arch: amd64
            win7: true

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build Binary
        shell: bash
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          GOARM: ${{ matrix.arm_version || '' }}
          CGO_ENABLED: 0
          GOEXPERIMENT: ${{ matrix.win7 && 'legacywindows' || '' }}  # Windows 7 兼容模式
        run: |
          OUTPUT="${{ env.PROJECT_NAME }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.arm_version || '' }}${{ matrix.win7 && '-win7' || '' }}"
          if [ "${{ matrix.os }}" = "windows" ]; then
            OUTPUT="$OUTPUT.exe"
          fi

          echo "=== 开始编译 ==="
          go build -o $OUTPUT ./main.go
          
          echo "=== 验证文件 ==="
          ls -al
          if [ ! -f "$OUTPUT" ]; then
            echo "::error ::编译失败：未生成 $OUTPUT"
            exit 1
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}${{ matrix.arm_version || '' }}${{ matrix.win7 && '-win7' || '' }}
          path: |
            go-diary-*
          retention-days: 3

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Set Build Time
        run: echo "BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare Release Assets
        shell: bash
        run: |
          mkdir release-assets
          find artifacts -type f -exec mv {} release-assets/ \;
          
          # 生成 SHA256 校验文件
          cd release-assets
          sha256sum * > SHA256SUMS.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: |
            ### 构建信息
            - **版本**: ${{ github.ref_name }}
            - **构建时间**: ${{ env.BUILD_TIME }}
            - **提交**: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            
            ### 支持平台
            - linux/amd64
            - linux/arm64
            - linux/armv6
            - linux/armv7
            - windows/amd64
            - windows/arm64
            - windows/amd64 (Win7 兼容)
            - darwin/amd64
            - darwin/arm64
          files: |
            release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
