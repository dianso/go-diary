name: Go Cross-Platform Build & Release

env:
  PROJECT_NAME: go-diary
  GO_VERSION: '1.21'

jobs:
  build:
    name: Build (${{ matrix.os }}-${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            suffix: ""
          # ... 其他平台配置保持不变 ...

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build Binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          GOARM: ${{ matrix.arm_version || '' }}
          CGO_ENABLED: 0
        run: |
          OUTPUT="${{ env.PROJECT_NAME }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.suffix }}"
          if [ "${{ matrix.os }}" = "windows" ]; then
            OUTPUT="$OUTPUT.exe"
          fi
          go build -o $OUTPUT ./main.go || exit 1
          if [ ! -f "$OUTPUT" ]; then
            echo "❌ 编译失败：未生成文件 $OUTPUT"
            exit 1
          fi
          chmod +x $OUTPUT
          echo "✅ 文件权限：$(ls -l $OUTPUT)"

      - name: Create Archive
        run: |
          BINARY="${{ env.PROJECT_NAME }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.suffix }}"
          echo "=== 调试：当前目录 ==="
          pwd
          echo "=== 调试：文件列表 ==="
          ls -al
          
          if [ -f "$BINARY" ]; then
            echo "✅ 文件存在：$BINARY"
          else
            echo "❌ 文件不存在：$BINARY"
            exit 1
          fi

          if [ "${{ matrix.os }}" = "windows" ]; then
            7z a "$BINARY.zip" "$BINARY.exe"
          else
            echo "=== 执行压缩 ==="
            tar czvf "$BINARY.tar.gz" "$BINARY"
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.suffix }}
          path: |
            ${{ env.PROJECT_NAME }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.suffix }}.*